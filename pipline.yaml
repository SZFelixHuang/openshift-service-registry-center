apiVersion: v1
kind: BuildConfig
metadata:
  name: service-registry-center-build-pipeline
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
            options {
                timeout(time: 20, unit: 'MINUTES') 
            }
            stages {
                stage('build-artifact-image') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject("spring-cloud") {
                                   def builds = openshift.selector("bc", "service-registry-center-artifact-build").related('builds')
                                   timeout(5) {
                                        builds.untilEach(1) {
                                            return (it.object().status.phase == "Complete")
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            stages {
                stage('build-runtime-image') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject("spring-cloud") {
                                   def builds = openshift.selector("bc", "service-registry-center-runtime-build").related('builds')
                                   timeout(5) {
                                        builds.untilEach(1) {
                                            return (it.object().status.phase == "Complete")
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            stages {
                stage('deployment-runtime-image') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject("spring-cloud") {
                                   def rm = openshift.selector("dc", "service-registry-center").rollout().latest()
                                   timeout(5) {
                                        openshift.selector("dc", "service-registry-center").related('pods').untilEach(1) {
                                            return (it.object().status.phase == "Running")
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    type: JenkinsPipeline