apiVersion: v1
kind: BuildConfig
metadata:
  name: service-registry-center-build-pipeline
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
            agent any
            stages {
                stage('build-artifact-image') {                 
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject("spring-cloud") {
                                    def buildSelector = openshift.selector("bc", "service-registry-center-artifact-build");
                                    buildSelector.logs('-f');
                                    buildSelector.startBuild();
                                    def builds = buildSelector.related('builds')
                                    builds.watch {
                                        echo "So far, service-registry-center-artifact-build has created builds: ${it.names()}"
                                        return it.count() > 0
                                    }
                                    builds.watch {
                                        if ( it.count() == 0 ) return false
                                        def allDone = true
                                        it.withEach {
                                            def buildModel = it.object();
                                            if ( it.object().status.phase != "Complete" ) {
                                                allDone = false
                                            }
                                        }
                                        return allDone;
                                    }
                                    builds.untilEach(1) {
                                        return it.object().status.phase == "Complete"
                                    }
                                }
                            }
                        }
                    }
                }
                stage('build-runtime-image') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject("spring-cloud") {
                                   def buildSelector = openshift.selector("bc", "service-registry-center-runtime-build");
                                   buildSelector.logs('-f');
                                   buildSelector.startBuild();
                                   def builds = buildSelector.related('builds')
                                    builds.watch {
                                        echo "So far, service-registry-center-runtime-build has created builds: ${it.names()}"
                                        return it.count() > 0
                                    }
                                    builds.watch {
                                        if ( it.count() == 0 ) return false
                                        def allDone = true
                                        it.withEach {
                                            def buildModel = it.object();
                                            if ( it.object().status.phase != "Complete" ) {
                                                allDone = false
                                            }
                                        }
                                        return allDone;
                                    }
                                    builds.untilEach(1) {
                                        return it.object().status.phase == "Complete"
                                    }
                                }
                            }
                        }
                    }
                }
                stage('deployment-runtime-image') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject("spring-cloud") {
                                    def dcSelector = openshift.selector("dc", "service-registry-center");
                                    def rm = dcSelector.rollout().latest();
                                    dcSelector.related('pods').untilEach(1) {
                                        return (it.object().status.phase == "Running")
                                    }
                                }
                            }
                        }
                    }
                }
            }
         }
    type: JenkinsPipeline