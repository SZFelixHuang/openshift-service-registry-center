apiVersion: v1
kind: BuildConfig
metadata:
  name: service-registry-center-build-pipeline
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        try{
            timeout(time: 90, unit: 'MINUTES'){
                stage('build-artifact-image') {                    
                    openshift.withCluster() {
                        openshift.withProject("spring-cloud") {
                           def builds = openshift.selector("bc", "service-registry-center-artifact-build").related('builds')
                           timeout(40) {
                                builds.untilEach(1) {
                                    return (it.object().status.phase == "Complete")
                                }
                            }
                        }
                    }
                }
                stage('build-runtime-image') {
                    openshift.withCluster() {
                        openshift.withProject("spring-cloud") {
                           def builds = openshift.selector("bc", "service-registry-center-runtime-build").related('builds')
                           timeout(20) {
                                builds.untilEach(1) {
                                    return (it.object().status.phase == "Complete")
                                }
                            }
                        }
                    }
                }
                stage('deployment-runtime-image') {
                    openshift.withCluster() {
                        openshift.withProject("spring-cloud") {
                           def rm = openshift.selector("dc", "service-registry-center").rollout().latest()
                           timeout(30) {
                                openshift.selector("dc", "service-registry-center").related('pods').untilEach(1) {
                                    return (it.object().status.phase == "Running")
                                }
                            }
                        }
                    }
                }
            }
        } catch(err){
                echo "${err}"
                currentBuild.result = 'Failture'
                throw err
        }
    type: JenkinsPipeline